/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var arbol = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,14],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[2,5,18,29,83,84,85,86,87,88],$Va=[2,5,18,29,34,51,53,57,58,59,60,61,64,65,66,67,68,83,84,85,86,87,88],$Vb=[18,21,31,32],$Vc=[1,31],$Vd=[12,15,17],$Ve=[2,13],$Vf=[1,33],$Vg=[1,49],$Vh=[1,41],$Vi=[1,58],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,40],$Vw=[1,42],$Vx=[1,71],$Vy=[17,31],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[12,17,22,31,36,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110],$VP=[1,114],$VQ=[12,17,22,31,36,95,96,101,102,103,104,105,106,107,108],$VR=[1,160],$VS=[1,162],$VT=[1,166],$VU=[1,167],$VV=[1,170],$VW=[1,171],$VX=[1,172],$VY=[1,163],$VZ=[1,168],$V_=[1,169],$V$=[1,164],$V01=[1,165],$V11=[12,17,22,31,36,95,96,97,98,99,101,102,103,104,105,106,107,108],$V21=[12,17,22,31,36,101,102,103,104,105,106,107,108],$V31=[2,18,34,51,53,57,58,59,60,61,64,65,66,67,68,84,85,86,87,88],$V41=[1,220],$V51=[1,214],$V61=[1,215],$V71=[1,216],$V81=[1,217],$V91=[1,218],$Va1=[1,219],$Vb1=[1,242],$Vc1=[1,245],$Vd1=[17,22],$Ve1=[1,298],$Vf1=[34,57,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DVARIABLES":7,"DARREGLOS":8,"DMETODO":9,"DFUNCION":10,"RUN":11,"puntocoma":12,"TIPO":13,"LISTAID":14,"asignar":15,"EXPRESION":16,"coma":17,"identificador":18,"AVARIABLES":19,"AARREGLOS":20,"corA":21,"corC":22,"UDIMENSION":23,"BDIMENSION":24,"new":25,"LISTAVALORES":26,"VALORES":27,"PRIMITIVO":28,"void":29,"parA":30,"parC":31,"llavA":32,"INSTRUCCIONES":33,"llavC":34,"PARAMETROS":35,"dospuntos":36,"PARAMETRO":37,"LLAMADA":38,"ENTRADAS":39,"LLAMADAS":40,"INSTRUCCION":41,"RETURN":42,"PRINT":43,"IF":44,"SWITCH":45,"BREAK":46,"CONTINUE":47,"WHILE":48,"DOWHILE":49,"FOR":50,"if":51,"else":52,"switch":53,"CASES":54,"DEFAULT":55,"CASO":56,"case":57,"default":58,"while":59,"do":60,"for":61,"DVAR":62,"AVAR":63,"return":64,"break":65,"continue":66,"print":67,"println":68,"UPPER":69,"toUpper":70,"LOWER":71,"toLower":72,"ROUND":73,"round":74,"LENGTH":75,"length":76,"TYPEOF":77,"typeof":78,"TOSTRING":79,"tostring":80,"TOCHAR":81,"tochar":82,"run":83,"int":84,"double":85,"boolean":86,"char":87,"string":88,"entero":89,"doble":90,"true":91,"false":92,"texto":93,"caracter":94,"mas":95,"menos":96,"mul":97,"div":98,"mod":99,"exp":100,"igual":101,"desigual":102,"menor":103,"menorIgual":104,"mayor":105,"mayorIgual":106,"or":107,"and":108,"not":109,"ternario":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"puntocoma",15:"asignar",17:"coma",18:"identificador",21:"corA",22:"corC",25:"new",29:"void",30:"parA",31:"parC",32:"llavA",34:"llavC",36:"dospuntos",51:"if",52:"else",53:"switch",57:"case",58:"default",59:"while",60:"do",61:"for",64:"return",65:"break",66:"continue",67:"print",68:"println",70:"toUpper",72:"toLower",74:"round",76:"length",78:"typeof",80:"tostring",82:"tochar",83:"run",84:"int",85:"double",86:"boolean",87:"char",88:"string",89:"entero",90:"doble",91:"true",92:"false",93:"texto",94:"caracter",95:"mas",96:"menos",97:"mul",98:"div",99:"mod",100:"exp",101:"igual",102:"desigual",103:"menor",104:"menorIgual",105:"mayor",106:"mayorIgual",107:"or",108:"and",109:"not",110:"ternario"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,5],[7,3],[14,3],[14,1],[19,4],[20,7],[20,10],[8,1],[8,1],[23,11],[23,9],[23,7],[24,16],[24,11],[26,3],[26,1],[27,5],[27,3],[9,7],[9,8],[10,7],[10,17],[35,3],[35,1],[37,2],[38,4],[38,5],[40,3],[40,4],[33,2],[33,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,2],[44,7],[44,11],[44,9],[45,8],[45,7],[54,2],[54,1],[56,4],[55,3],[48,7],[49,9],[50,11],[50,11],[62,4],[63,3],[42,2],[42,3],[46,2],[47,2],[43,5],[43,5],[69,4],[71,4],[73,4],[75,4],[77,4],[79,4],[81,4],[11,5],[11,6],[39,3],[39,1],[13,1],[13,1],[13,1],[13,1],[13,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,5],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,4],[16,3],[16,3],[16,4],[16,7],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       
             //Separar Entrada
             entrada1 = $$[$0-1]   
             nodo = new Nodo("RAIZ", "RAIZ")
             nodo.add(entrada1.nodo)
             //Objeto de Salida
             salida = {
                lerrores: lista,
                instrucciones: entrada1.instruccion,
                lsimbolos: simbolos,
                lmetodos: metodos,
                arbol: nodo
             }
             //Reiniciar la lista de Errores
             lista = new ListaErrores();
             simbolos = new ListaSimbolos();
             metodos = new ListaMetodos();
             return salida;
        
break;
case 2:

                //GET:  Values
                entrada1 = $$[$0-1]
                entrada2 = $$[$0]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 3:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("SENTENCIAS", "SENTENCIAS")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 4: case 5: case 6: case 7: case 8:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("SENTENCIA", "SENTENCIA")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 9: case 55:

                lista.add("Sint√°ctico", "Token Inesperado " + $$[$0-1] , _$[$0-1].first_line, _$[$0-1].first_column + 1);
        
break;
case 10:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-3]
                entrada3 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.declaracionv(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC VARIABLES", "DEC VARIABLES")
                nodo.add(entrada1.nodo, entrada2.nodo ,new Nodo("OPERADOR", $$[$0-2]), entrada3.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 11:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.declaracionv(entrada1.instruccion, entrada2.instruccion, null, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("DEC VARIABLES", "DEC VARIABLES")
                nodo.add(entrada1.nodo, entrada2.nodo ,new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 12:

                //GET:  Values
                entrada1 = $$[$0-2]
                //OUTPUT
                entrada1.instruccion.push($$[$0])
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                 nodo.add(new Nodo("ID", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 13:

                //OUTPUT
                instruccion = [$$[$0]]
                nodo = new Nodo("LISTA ID", "LISTA ID")
                nodo.add(new Nodo("ID", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 14:

                //GET:  Values
                entrada1 = $$[$0-1]
                
                //OUTPUT
                instruccion = INSTRUCCION.asignacionv($$[$0-3],entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("ASI VARIABLES", "ASI VARIABLES")
                nodo.add(new Nodo("ID", $$[$0-3]),new Nodo("OPERADOR", $$[$0-2]),  entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 15:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-1]
                
                //OUTPUT
                instruccion = INSTRUCCION.asignarv($$[$0-6], entrada1.instruccion, null, entrada2.instruccion,  this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("ASI UNIDIMENSIONAL", "ASI UNIDIMENSIONAL")
                nodo.add(new Nodo("ID", $$[$0-6]),new Nodo("OPERADOR", $$[$0-5]),  entrada1.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 16:

                //GET:  Values
                entrada1 = $$[$0-7]
                entrada2 = $$[$0-4]
                entrada3 = $$[$0-1]
                
                //OUTPUT
                instruccion =  INSTRUCCION.asignarv($$[$0-9], entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("ASI BIDIMENSIONAL", "ASI BIDIMENSIONAL")
                nodo.add(new Nodo("OPERADOR", $$[$0-9]),new Nodo("OPERADOR", $$[$0-8]),  entrada1.nodo, new Nodo("OPERADOR", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0-3]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 17: case 18:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("DEC ARREGLOS", "DEC ARREGLOS")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 19:

                //GET:  Values
                entrada1 = $$[$0-10]
                entrada2 = $$[$0-4]
                entrada3 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.declaraciona1(entrada1.instruccion, $$[$0-9], entrada2.instruccion, entrada3.instruccion, null,this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC UNIDIMENSIONAL", "DEC UNIDIMENSIONAL")
                nodo.add(entrada1.nodo, new Nodo("ID", $$[$0-9]),new Nodo("OPERADOR", $$[$0-8]), new Nodo("OPERADOR", $$[$0-7]), new Nodo("OPERADOR", $$[$0-6]),  new Nodo("OPERADOR", $$[$0-5]), entrada2.nodo ,new Nodo("OPERADOR", $$[$0-3]), entrada3.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 20:

                //GET:  Values
                entrada1 = $$[$0-8]
                entrada2 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.declaraciona2(1, entrada1.instruccion, $$[$0-7], entrada2.instruccion, null, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("DEC UNIDIMENSIONAL", "DEC UNIDIMENSIONAL")
                nodo.add(entrada1.nodo, new Nodo("ID", $$[$0-7]),new Nodo("OPERADOR", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]),  new Nodo("OPERADOR", $$[$0-3]), entrada2.nodo ,new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 21:

                //GET:  Values
                entrada1 = $$[$0-6]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.declaraciona3(1, entrada1.instruccion, $$[$0-5], entrada1.instruccion, null, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("DEC UNIDIMENSIONAL", "DEC UNIDIMENSIONAL")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-5]),new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]),  entrada2.nodo ,new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 22:

                //GET:  Values
                entrada1 = $$[$0-15]
                entrada2 = $$[$0-7]
                entrada3 = $$[$0-5]
                entrada4 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.declaraciona1(entrada1.instruccion, $$[$0-14], entrada2.instruccion, entrada3.instruccion, entrada4.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC BIDIMENSIONAL", "DEC BIDIMENSIONAL")
                nodo.add(entrada1.nodo, new Nodo("ID", $$[$0-14]),new Nodo("OPERADOR", $$[$0-13]), new Nodo("OPERADOR", $$[$0-12]), new Nodo("OPERADOR", $$[$0-11]),  new Nodo("OPERADOR", $$[$0-10]), new Nodo("OPERADOR", $$[$0-9]),new Nodo("OPERADOR", $$[$0-8]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-6]), entrada3.nodo, new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada4.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 23:

                //GET:  Values
                entrada1 = $$[$0-10]
                entrada2 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.declaraciona2(2, entrada1.instruccion, $$[$0-9], entrada2.instruccion, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("DEC BIDIMENSIONAL", "DEC BIDIMENSIONAL")
                nodo.add(entrada1.nodo, new Nodo("ID", $$[$0-9]),new Nodo("OPERADOR", $$[$0-8]), new Nodo("OPERADOR", $$[$0-7]), new Nodo("OPERADOR", $$[$0-6]),  new Nodo("OPERADOR", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]),new Nodo("OPERADOR", $$[$0-3]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 24:

                 //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 25:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("LISTAVALORES", "LISTAVALORES")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 26:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-1]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 27:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("VALORES", "VALORES")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 28:

                //GET:  Values
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.dmetodo($$[$0-5], null, entrada2.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC METODO", "DEC METODO")
                nodo.add(new Nodo("ID", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
        
break;
case 29:

                //GET:  Values
                entrada2 = $$[$0-4]
                entrada3 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.dmetodo($$[$0-6], entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC METODO", "DEC METODO")
                nodo.add(new Nodo("ID", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada3.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 30:

                //GET:  Values
                entrada2 = $$[$0-6]
                entrada3 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.dfuncion($$[$0-5], null, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC FUNCION", "DEC FUNCION")
                nodo.add(new Nodo("ID", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-2]), entrada3.nodo,  new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 31:

                //GET:  Values
                entrada2 = $$[$0-13]
                entrada3 = $$[$0-16]
                entrada4 = $$[$0-10]
                //OUTPUT
                instruccion = INSTRUCCION.dfuncion($$[$0-15], entrada2.instruccion, entrada3.instruccion, entrada4.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEC FUNCION", "DEC FUNCION")
                nodo.add(new Nodo("ID", $$[$0-15]), new Nodo("OPERADOR", $$[$0-14]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-12]), entrada3.nodo, new Nodo("OPERADOR", $$[$0-11]), entrada4.nodo ,new Nodo("OPERADOR", $$[$0-9]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 32:

               //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 33:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("PARAMETROS", "PARAMETROS")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 34:

                //GET:  Values
                entrada1 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.declaracionp(entrada1.instruccion, $$[$0], null, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("PARAMETRO", "PARAMETRO")
                nodo.add(entrada1.nodo, new Nodo("ID", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 35:

                        //OUTPUT
                        instruccion = INSTRUCCION.llamada($$[$0-3], null, this._$.first_line, this._$.first_column+1)
                        nodo = new Nodo("LLAMAR", "LLAMAR")
                        nodo.add(new Nodo("ID", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                        salida = {
                                nodo: nodo,
                                instruccion: instruccion
                        }
                        this.$ = salida
                
break;
case 36:

                        //GET:  Values
                        entrada1 = $$[$0-2]
                        //OUTPUT
                        instruccion = INSTRUCCION.llamadaa($$[$0-4], entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                        nodo = new Nodo("LLAMAR", "LLAMAR")
                        nodo.add(new Nodo("ID", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                        salida = {
                                nodo: nodo,
                                instruccion: instruccion
                        }
                        this.$ = salida
                
break;
case 37:

                        //OUTPUT
                        instruccion = INSTRUCCION.llamadaa($$[$0-2], null, this._$.first_line, this._$.first_column+1)
                        nodo = new Nodo("LLAMAR", "LLAMAR")
                        nodo.add(new Nodo("ID", $$[$0-2]), new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                        salida = {
                                nodo: nodo,
                                instruccion: instruccion
                        }
                        this.$ = salida
                        
                
break;
case 38:

                        //GET:  Values
                        entrada1 = $$[$0-1]
                        //OUTPUT
                        instruccion = INSTRUCCION.llamadaa($$[$0-3], entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                        nodo = new Nodo("LLAMAR", "LLAMAR")
                        nodo.add(new Nodo("IDENTIFICADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                        salida = {
                                nodo: nodo,
                                instruccion: instruccion
                        }
                        this.$ = salida
                
break;
case 39: case 61:

                //GET:  Values
                entrada1 = $$[$0-1]
                entrada2 = $$[$0]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 40:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("INSTRUCCIONES", "INSTRUCCIONES")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 41:

                 //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("INSTRUCCION", "INSTRUCCION")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 42: case 44: case 45: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("INSTRUCCION", "INSTRUCCION")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 43: case 46:

               //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("INSTRUCCION", "INSTRUCCION")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 56:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.si(entrada1.instruccion, entrada2.instruccion, null, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("IF", "IF")
                nodo.add(new Nodo("OPERADOR", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 57:

                //GET:  Values
                entrada1 = $$[$0-8]
                entrada2 = $$[$0-5]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.si(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("IF", "IF")
                nodo.add(new Nodo("OPERADOR", $$[$0-10]), new Nodo("OPERADOR", $$[$0-9]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-7]), new Nodo("OPERADOR", $$[$0-6]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0-4]),new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada3.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 58:

                //GET:  Values
                entrada1 = $$[$0-6]
                entrada2 = $$[$0-3]
                entrada2 = $$[$0]
                //OUTPUT
                instruccion = INSTRUCCION.si(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("IF", "IF")
                nodo.add(new Nodo("OPERADOR", $$[$0-8]), new Nodo("OPERADOR", $$[$0-7]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0-2]),new Nodo("OPERADOR", $$[$0-1]), entrada3.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 59:

                //GET:  Values
                entrada1 = $$[$0-5]
                entrada2 = $$[$0-2]
                entrada3 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.switch(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("SWITCH", "SWITCH")
                nodo.add(new Nodo("OPERADOR", $$[$0-7]), new Nodo("OPERADOR", $$[$0-6]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]),  entrada2.nodo, entrada3.nodo,  new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 60:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.switch(entrada1.instruccion, entrada2.instruccion,null, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("SWITCH", "SWITCH")
                nodo.add(new Nodo("OPERADOR", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 62:

               //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("CASES", "CASES")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 63:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]
                //OUTPUT
                instruccion = INSTRUCCION.case(entrada1.instruccion, entrada2.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("CASE", "CASE")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
        
break;
case 64:

                //GET:  Values
                entrada1 = $$[$0]
                
                //OUTPUT
                instruccion = INSTRUCCION.default(null, entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DEFAULT", "DEFAULT")
                nodo.add(new Nodo("OPERADOR", $$[$0-2]), new Nodo("OPERADOR", $$[$0-1]), entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 65:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.while(entrada1.instruccion, entrada2.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("WHILE", "WHILE")
                nodo.add(new Nodo("OPERADOR", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]),  entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 66:

                //GET:  Values
                entrada2 = $$[$0-6]
                entrada1 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.dowhile(entrada1.instruccion, entrada2.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("DO-WHILE", "DO-WHILE")
                nodo.add(new Nodo("OPERADOR", $$[$0-8]), new Nodo("OPERADOR", $$[$0-7]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-5]), new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 67:

                //GET:  Values
                entrada1 = $$[$0-8]
                entrada2 = $$[$0-6]
                entrada3 = $$[$0-4]
                entrada4 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.for(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, entrada4.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("FOR", "FOR")
                nodo.add(new Nodo("OPERADOR", $$[$0-10]), new Nodo("OPERADOR", $$[$0-9]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-7]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-5]), entrada3.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada4.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
               
        
break;
case 68:

                //GET:  Values
                entrada1 = $$[$0-8]
                entrada2 = $$[$0-6]
                entrada3 = $$[$0-4]
                entrada4 = $$[$0-1]
                //OUTPUT
                instruccion = INSTRUCCION.for(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, entrada4.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("FOR", "FOR")
                nodo.add(new Nodo("OPERADOR", $$[$0-10]), new Nodo("OPERADOR", $$[$0-9]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-7]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-5]), entrada3.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada4.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 69:

                //GET:  Values
                entrada1 = $$[$0-3]
                entrada2 = $$[$0-2]
                entrada3 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.declaracionv(entrada1.instruccion, entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("DECLARACION VAR", "DECLARACION VAR")
                nodo.add(entrada1.nodo, entrada2.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada3.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
               
        
break;
case 70:

                //GET:  Values
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.asignacionv($$[$0-2],entrada2.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("ASIGNACION VAR", "ASIGNACION VAR")
                nodo.add(new Nodo("ID", $$[$0-2]), new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
               
        
break;
case 71:

                //OUTPUT
                instruccion =INSTRUCCION.return(null, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("RETURN", "RETURN")
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 72:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.return(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("RETURN", "RETURN")
                nodo.add(new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
                
        
break;
case 73:

                //OUTPUT
                instruccion = INSTRUCCION.break(this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("BREAK", "BREAK")
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 74:

                //OUTPUT
                instruccion = INSTRUCCION.continue(this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("CONTINUE", "CONTINUE")
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida 
        
break;
case 75:

                //GET:  Values
                entrada1 = $$[$0-2]

                //OUTPUT
                instruccion = INSTRUCCION.print(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("PRINT", "PRINT")
                nodo.add(new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
        
break;
case 76:

                //GET:  Values
                entrada1 = $$[$0-2]

                //OUTPUT
                instruccion = INSTRUCCION.println(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("PRINTLN", "PRINTLN")
                nodo.add(new Nodo("OPERADOR", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 77:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.upper(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("UPPER", "UPPER")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
        
break;
case 78:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.lower(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("LOWER", "LOWER")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 79:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.round(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("ROUND", "ROUND")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 80:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.length(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("LENGTH", "LENGTH")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 81:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.typeof(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("TYPEOF", "TYPEOF")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
         
        
break;
case 82:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.tostring(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("TOSTRING", "TOSTRING")
                nodo.add(new Nodo("TOSTRING", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida 
                
        
break;
case 83:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.tochar(entrada1.instruccion, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("TOCHAR", "TOCHAR")
                nodo.add(new Nodo("TOCHAR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida 
        
break;
case 84:

                //OUTPUT
                instruccion = INSTRUCCION.run($$[$0-3], null, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("RUN", "RUN")
                nodo.add(new Nodo("RUN", $$[$0-4]), new Nodo("ID", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 85:

                //GET:  Values
                entrada2 = $$[$0-2]
                //OUTPUT
                instruccion = INSTRUCCION.run($$[$0-4], entrada2.instruccion, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("RUN", "RUN")
                nodo.add(new Nodo("RUN", $$[$0-5]), new Nodo("ID", $$[$0-4]), new Nodo("OPERADOR", $$[$0-3]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 86:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]
                //OUTPUT
                entrada1.instruccion.push(entrada2.instruccion)
                instruccion = entrada1.instruccion
                nodo = entrada1.nodo
                nodo.add(entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 87:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = [entrada1.instruccion]
                nodo = new Nodo("ENTRADA", "ENTRADA")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 88:

                //OUTPUT
                instruccion = TIPO_DATO.INT
                nodo = new Nodo("TIPO", "TIPO")
                nodo.add(new Nodo("INT", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 89:

            //OUTPUT
                instruccion = TIPO_DATO.DOUBLE
                nodo = new Nodo("TIPO", "TIPO")
                nodo.add(new Nodo("DOUBLE", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
    
break;
case 90:

            //OUTPUT
                instruccion = TIPO_DATO.BOOLEAN
                nodo = new Nodo("TIPO", "TIPO")
                nodo.add(new Nodo("BOOLEAN", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

    
break;
case 91:

            //OUTPUT
                instruccion = TIPO_DATO.CHAR
                nodo = new Nodo("TIPO", "TIPO")
                nodo.add(new Nodo("CHAR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
    
break;
case 92:

            //OUTPUT
                instruccion = TIPO_DATO.STRING
                nodo = new Nodo("TIPO", "TIPO")
                nodo.add(new Nodo("STRING", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
    
break;
case 93:

                //OUTPUT
                instruccion = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("ENTERO", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 94:

                //OUTPUT
                instruccion = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.DOUBLE, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("DOBLE", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 95:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("BOOLEAN", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 96:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("BOOLEAN", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 97:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.STRING, this._$.first_line, this._$.first_column+1);;
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("STRING", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 98:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.CHAR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("CHAR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 99:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("PRIMITIVO", "PRIMITIVO")
                nodo.add(new Nodo("ID", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 100:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 101:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 102:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MULTIPLICACION, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 103:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.DIVISION, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 104:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MODULO, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 105:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.POTENCIA, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 106:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,null, TIPO_OPERACION.UNARIO, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("OPERADOR", $$[$0-1]), entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 107:

                //GET:  Values
                entrada1 = $$[$0-1]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("OPERADOR", $$[$0-2]), entrada1.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 108:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.IGUAL, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 109:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.DESIGUAL, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 110:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MENOR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 111:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MENORIGUAL, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 112:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MAYOR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
                
        
break;
case 113:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.MAYORIGUAL, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 114:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.OR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 115:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,entrada2.instruccion, TIPO_OPERACION.AND, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 116:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion,null, TIPO_OPERACION.NOT, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("OPERADOR", $$[$0-1]), entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 117:

                //GET:  Values
                entrada1 = $$[$0-4]
                entrada2 = $$[$0-2]
                entrada3 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.ternario(entrada1.instruccion,entrada2.instruccion, entrada3.instruccion, TIPO_OPERACION.TERNARIO, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-3]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada3.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 118:

                //OUTPUT
                instruccion = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("ENTERO", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 119:

                //OUTPUT
                instruccion = INSTRUCCION.valor(Number($$[$0]), TIPO_VALOR.DOUBLE, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("DOBLE", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 120:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("BOOLEAN", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 121:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("BOOLEAN", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 122:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.STRING, this._$.first_line, this._$.first_column+1);;
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("STRING", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 123:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.CHAR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("CHAR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 124:

                //OUTPUT
                instruccion = INSTRUCCION.valor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("ID", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 125:

                //GET:  Values
                entrada1 = $$[$0-2]
                entrada2 = $$[$0]

                //OUTPUT
                instruccion = INSTRUCCION.casteo(entrada1.instruccion, entrada2.instruccion, TIPO_OPERACION.CASTEO, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("OPERADOR", $$[$0-3]), entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), entrada2.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 126:

                //GET:  Values
                entrada1 = $$[$0-2]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion, null, TIPO_OPERACION.INCREMENTO, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida       
        
break;
case 127:

                //GET:  Values
                entrada1 = $$[$0-2]

                //OUTPUT
                instruccion = INSTRUCCION.operacion(entrada1.instruccion, null, TIPO_OPERACION.DECREMENTO, this._$.first_line, this._$.first_column+1)
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo, new Nodo("OPERADOR", $$[$0-1]), new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida         
        
break;
case 128:

                //GET:  Values
                entrada2 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.valorv($$[$0-3], entrada2.instruccion, null,  this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("ID", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada2.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida

        
break;
case 129:

                //GET:  Values
                entrada2 = $$[$0-4]
                entrada3 = $$[$0-1]

                //OUTPUT
                instruccion = INSTRUCCION.valorv($$[$0-6], entrada2.instruccion, entrada3.instruccion, this._$.first_line, this._$.first_column+1);
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(new Nodo("ID", $$[$0-6]), new Nodo("OPERADOR", $$[$0-5]), entrada2.nodo, new Nodo("OPERADOR", $$[$0-3]), new Nodo("OPERADOR", $$[$0-2]), entrada3.nodo, new Nodo("OPERADOR", $$[$0]))
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
case 130:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
        
break;
case 131: case 132: case 133: case 134: case 135: case 136: case 137:

                //GET:  Values
                entrada1 = $$[$0]

                //OUTPUT
                instruccion = entrada1.instruccion;
                nodo = new Nodo("EXPRESION", "EXPRESION")
                nodo.add(entrada1.nodo)
                salida = {
                        nodo: nodo,
                        instruccion: instruccion
                }
                this.$ = salida
        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,23:11,24:12,29:$V2,83:$V3,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{1:[3]},{2:$V0,5:[1,21],6:22,7:4,8:5,9:6,10:7,11:8,13:10,18:$V1,23:11,24:12,29:$V2,83:$V3,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),{12:[1,23]},{14:24,18:[1,25]},o($Va,[2,17]),o($Va,[2,18]),{18:[1,26]},{30:[1,27]},{18:[1,28]},o($Vb,[2,88]),o($Vb,[2,89]),o($Vb,[2,90]),o($Vb,[2,91]),o($Vb,[2,92]),{1:[2,1]},o($V9,[2,2]),o($V9,[2,9]),{12:[1,30],15:[1,29],17:$Vc},o($Vd,$Ve,{21:$Vf,30:[1,32]}),{30:[1,34]},{13:37,35:35,37:36,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{30:[1,38]},{16:39,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($Va,[2,11]),{18:[1,65]},{31:[1,66]},{22:[1,67]},{13:37,31:[1,68],35:69,37:36,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{17:$Vx,31:[1,70]},o($Vy,[2,33]),{18:[1,72]},{16:75,18:$Vg,30:$Vh,31:[1,73],39:74,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{12:[1,76],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{16:92,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{13:94,16:93,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:95,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($VO,[2,118]),o($VO,[2,119]),o($VO,[2,120]),o($VO,[2,121]),o($VO,[2,122]),o($VO,[2,123]),o($VO,[2,124],{21:[1,96],30:[1,97]}),o($VO,[2,130]),o($VO,[2,131]),o($VO,[2,132]),o($VO,[2,133]),o($VO,[2,134]),o($VO,[2,135]),o($VO,[2,136]),o($VO,[2,137]),{30:[1,98]},{30:[1,99]},{30:[1,100]},{30:[1,101]},{30:[1,102]},{30:[1,103]},{30:[1,104]},o($Vd,[2,12]),{32:[1,105]},{15:[1,106],21:[1,107]},{32:[1,108]},{17:$Vx,31:[1,109]},{36:[1,110]},{13:37,37:111,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($Vy,[2,34]),{12:[1,112]},{17:$VP,31:[1,113]},o($Vy,[2,87],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN}),o($Va,[2,10]),{16:115,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,95:[1,116],96:$Vv,109:$Vw},{16:117,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:[1,118],109:$Vw},{16:119,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:120,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:121,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:122,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:123,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:124,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:125,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:126,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:127,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:128,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:129,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:130,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:131,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($VQ,[2,106],{97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),{31:[1,132],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,133]},o([12,17,22,31,36,107,108],[2,116],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,110:$VN}),{16:134,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:75,18:$Vg,30:$Vh,31:[1,135],39:136,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:137,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:138,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:139,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:140,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:141,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:142,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:143,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:144,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{16:175,18:$Vg,21:[1,174],25:[1,173],30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{22:[1,176]},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:177,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{32:[1,178]},{13:179,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($Vy,[2,32]),o($V9,[2,84]),{12:[1,180]},{16:181,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($VQ,[2,100],{97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($VO,[2,126]),o($VQ,[2,101],{97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($VO,[2,127],{40:50,69:51,71:52,73:53,75:54,77:55,79:56,81:57,16:92,18:$Vg,30:$Vh,70:$Vi,72:$Vj,74:$Vk,76:$Vl,78:$Vm,80:$Vn,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,109:$Vw}),o($V11,[2,102],{100:$VE,110:$VN}),o($V11,[2,103],{100:$VE,110:$VN}),o($V11,[2,104],{100:$VE,110:$VN}),o($V11,[2,105],{110:$VN}),o($V21,[2,108],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($V21,[2,109],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($V21,[2,110],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($V21,[2,111],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($V21,[2,112],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o($V21,[2,113],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,110:$VN}),o([12,17,22,31,36],[2,114],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN}),o([12,17,22,31,36,107],[2,115],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,108:$VM,110:$VN}),{36:[1,182],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($VO,[2,107]),{16:183,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{22:[1,184],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($VO,[2,37]),{17:$VP,31:[1,185]},{31:[1,186],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,187],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,188],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,189],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,190],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,191],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,192],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,193],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($V31,[2,40]),o($V31,[2,41]),o($V31,[2,42]),o($V31,[2,43]),o($V31,[2,44]),o($V31,[2,45]),o($V31,[2,46]),o($V31,[2,47]),o($V31,[2,48]),o($V31,[2,49]),o($V31,[2,50]),o($V31,[2,51]),o($V31,[2,52]),o($V31,[2,53]),o($V31,[2,54]),{12:[1,195]},{14:24,18:[1,196]},{15:[1,197],21:[1,198],30:[1,199]},{12:[1,200],16:201,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{30:[1,202]},{30:[1,203]},{30:[1,204]},{30:[1,205]},{12:[1,206]},{12:[1,207]},{30:[1,208]},{32:[1,209]},{30:[1,210]},{13:211,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{18:$V41,26:212,28:213,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1},{12:[1,221],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{15:[1,222]},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,223],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:224,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{32:[1,225]},o($V9,[2,85]),o($Vy,[2,86],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN}),{16:226,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($VO,[2,125]),o($VO,[2,128],{21:[1,227]}),o($VO,[2,38]),o($VO,[2,77]),o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),o($VO,[2,81]),o($VO,[2,82]),o($VO,[2,83]),o($V9,[2,30]),o($V31,[2,39]),o($V31,[2,55]),o($Vd,$Ve,{21:$Vf}),{16:228,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:229,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:75,18:$Vg,30:$Vh,31:[1,230],39:231,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($V31,[2,71]),{12:[1,232],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{16:233,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:234,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:235,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:236,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($V31,[2,73]),o($V31,[2,74]),{16:237,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:238,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{13:241,18:$Vb1,62:239,63:240,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{21:[1,243]},{17:$Vc1,22:[1,244]},o($Vd1,[2,25]),o($Vd1,[2,93]),o($Vd1,[2,94]),o($Vd1,[2,95]),o($Vd1,[2,96]),o($Vd1,[2,97]),o($Vd1,[2,98]),o($Vd1,[2,99]),o($Va,[2,21]),{21:[1,247],25:[1,246]},o($V9,[2,28]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,248],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:249,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($VO,[2,117]),{16:250,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{12:[1,251],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{22:[1,252],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{12:[1,253]},{17:$VP,31:[1,254]},o($V31,[2,72]),{31:[1,255],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,256],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,257],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,258],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,259],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,260],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{12:[1,261]},{12:[1,262]},{14:263,18:[1,264]},{15:[1,265]},{16:266,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{12:[1,267]},{18:$V41,28:268,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1},{13:269,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{21:[1,271],27:270},o($V9,[2,29]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,272],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{22:[1,273],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($V31,[2,14]),{15:[1,274],21:[1,275]},o($V31,[2,35]),{12:[1,276]},{12:[1,277]},{12:[1,278]},{32:[1,279]},{32:[1,280]},{32:[1,281]},{59:[1,282]},{16:283,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:284,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{15:[1,285],17:$Vc},o([15,17],$Ve),{16:286,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{22:[1,287],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($Va,[2,20]),o($Vd1,[2,24]),{21:[1,288]},{17:[1,290],22:[1,289]},{18:$V41,26:291,28:213,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1},{13:292,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($VO,[2,129]),{16:293,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{16:294,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($V31,[2,36]),o($V31,[2,75]),o($V31,[2,76]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:295,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{54:296,56:297,57:$Ve1},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:299,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{30:[1,300]},{12:[1,301],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{12:[1,302],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{16:303,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o([12,31],[2,70],{95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN}),{12:[1,304]},{16:305,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{12:[1,306]},{21:[1,307]},{17:$Vc1,22:[1,308]},{18:[1,309]},{12:[1,310],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{22:[1,311],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,312],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{34:[1,314],55:313,56:315,57:$Ve1,58:[1,316]},o($Vf1,[2,62]),{16:317,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,318],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{16:319,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{18:$Vb1,63:320},{18:$Vb1,63:321},{12:[2,69],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($Va,[2,19]),{22:[1,322],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($Va,[2,23]),{18:$V41,26:323,28:213,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1},o($Vd1,[2,27]),{30:[1,324]},o($V31,[2,15]),{15:[1,325]},o($V31,[2,56],{52:[1,326]}),{34:[1,327]},o($V31,[2,60]),o($Vf1,[2,61]),{36:[1,328]},{36:[1,329],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},o($V31,[2,65]),{31:[1,330],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{31:[1,331]},{31:[1,332]},{21:[1,333]},{17:$Vc1,22:[1,334]},{13:37,35:335,37:36,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{16:336,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},{32:[1,337],44:338,51:$VT},o($V31,[2,59]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:339,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:340,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{12:[1,341]},{32:[1,342]},{32:[1,343]},{16:344,18:$Vg,30:$Vh,40:50,69:51,70:$Vi,71:52,72:$Vj,73:53,74:$Vk,75:54,76:$Vl,77:55,78:$Vm,79:56,80:$Vn,81:57,82:$Vo,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt,94:$Vu,96:$Vv,109:$Vw},o($Vd1,[2,26]),{17:$Vx,31:[1,345]},{12:[1,346],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:347,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($V31,[2,58]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[2,64],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($Vf1,[2,63],{23:11,24:12,7:146,19:147,8:148,20:149,42:150,38:151,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,13:161,41:194,2:$VR,18:$VS,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8}),o($V31,[2,66]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:348,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:349,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{22:[1,350],95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VN},{32:[1,351]},o($V31,[2,16]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,352],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,353],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,354],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},{12:[1,355]},{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,33:356,38:151,41:145,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($V31,[2,57]),o($V31,[2,67]),o($V31,[2,68]),o($Va,[2,22]),{2:$VR,7:146,8:148,13:161,18:$VS,19:147,20:149,23:11,24:12,34:[1,357],38:151,41:194,42:150,43:152,44:153,45:154,46:155,47:156,48:157,49:158,50:159,51:$VT,53:$VU,59:$VV,60:$VW,61:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8},o($V9,[2,31])],
defaultActions: {21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        //Importes
        var ListaErrores = require("./Bases-TW/Errors/ListaErrores");
        var ListaSimbolos = require("./Bases-TW/Models/ListaSimbolos");
        var ListaMetodos = require("./Bases-TW/Models/ListaMetodos");
        const Nodo = require('./Bases-TW/AST/NodoAST');
        const TIPO_OPERACION = require('./Bases-TW/Reserved/TipoOperacion');
        const TIPO_VALOR = require('./Bases-TW/Reserved/TipoValor');
        const TIPO_DATO = require('./Bases-TW/Reserved/TipoDato');
        const INSTRUCCION = require('./Bases-TW/Instruction/Instruccion');

        //Instrucciones
        var lista = new ListaErrores();
        var simbolos = new ListaSimbolos();
        var metodos = new ListaMetodos();
        let entrada3;
        let entrada4;
        let entrada1;
        let entrada2;
        let salida;
        let instruccion;
        let nodo;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacios en blanco
break;
case 1://Comentario unilinea
break;
case 2://Comentario multilinea
break;
case 3:return 84;
break;
case 4:return 85;
break;
case 5:return 86;
break;
case 6:return 87;
break;
case 7:return 88;
break;
case 8:return 91;
break;
case 9:return 92;
break;
case 10:return 25;
break;
case 11:return 29;
break;
case 12:return 67;
break;
case 13:return 68;
break;
case 14:return 64;
break;
case 15:return 72;
break;
case 16:return 70;
break;
case 17:return 74;
break;
case 18:return 76;
break;
case 19:return 78;
break;
case 20:return 80;
break;
case 21:return 82;
break;
case 22:return 83;
break;
case 23:return 51;
break;
case 24:return 52;
break;
case 25:return 53;
break;
case 26:return 57;
break;
case 27:return 58;
break;
case 28:return 65;
break;
case 29:return 61;
break;
case 30:return 59;
break;
case 31:return 60;
break;
case 32:return 66;
break;
case 33:return 95;
break;
case 34:return 96;
break;
case 35:return 97;
break;
case 36:return 98;
break;
case 37:return 100;
break;
case 38:return 99;
break;
case 39:return 101;
break;
case 40:return 102;
break;
case 41:return 104;
break;
case 42:return 106;
break;
case 43:return 103;
break;
case 44:return 105;
break;
case 45:return 15;
break;
case 46:return 36;
break;
case 47:return 110;
break;
case 48:return 107;
break;
case 49:return 108;
break;
case 50:return 109;
break;
case 51:return 30;
break;
case 52:return 31;
break;
case 53:return 21;
break;
case 54:return 22;
break;
case 55:return 32;
break;
case 56:return 34; 
break;
case 57:return 12;
break;
case 58:return 17;
break;
case 59:cadena= "";        this.pushState("string");
break;
case 60:cadena += yy_.yytext;
break;
case 61:cadena += "\"";
break;
case 62:cadena += "\n";
break;
case 63:cadena += " ";
break;
case 64:cadena += "\t";
break;
case 65:cadena += "\\";
break;
case 66:cadena += "\'";
break;
case 67:yy_.yytext=cadena; this.popState(); return 93;
break;
case 68:return 94;
break;
case 69:return 90;
break;
case 70:return 89;               
break;
case 71:return 18;  
break;
case 72:return 5;
break;
case 73:
                                lista.add("L√©xico", "Caracter Inesperado: " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column  + 1);

                            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([^"!>"]|[\r|\f|\s|\t|\n])*\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:'(\\n|\\\\|\\t|\\r|\\'|\\"|.)')/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z_])([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[60,61,62,63,64,65,66,67],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = arbol;
exports.Parser = arbol.Parser;
exports.parse = function () { return arbol.parse.apply(arbol, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}